/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
 default none;
 grad(Csalt) Gauss linear;
 grad(Cpart1) Gauss linear;
 grad(Cpart2) Gauss linear;
 grad(Cpart3) Gauss linear;
 grad(Cpart4) Gauss linear;
 grad(Cpart5) Gauss linear;
 grad(U) Gauss linear;
 grad(p) Gauss linear;
}

divSchemes
{
 default none;
 div(phi,Csalt) Gauss linear;
 div(phi,U) Gauss linear;
 div((nuEff*dev2(T(grad(U))))) Gauss linear;
 div((interpolate((U+((gammap1|Csalt)*grad(Csalt))))&S),Cpart1) Gauss limitedLinear 1.0;
 div((interpolate((U+((gammap2|Csalt)*grad(Csalt))))&S),Cpart2) Gauss limitedLinear 1.0;
 div((interpolate((U+((gammap3|Csalt)*grad(Csalt))))&S),Cpart3) Gauss limitedLinear 1.0;
 div((interpolate((U+((gammap4|Csalt)*grad(Csalt))))&S),Cpart4) Gauss limitedLinear 1.0;
 div((interpolate((U+((gammap5|Csalt)*grad(Csalt))))&S),Cpart5) Gauss limitedLinear 1.0;
}

laplacianSchemes
{
 default none;
 laplacian(Dpart1,Cpart1) Gauss linear corrected;
 laplacian(Dpart2,Cpart2) Gauss linear corrected;
 laplacian(Dpart3,Cpart3) Gauss linear corrected;
 laplacian(Dpart4,Cpart4) Gauss linear corrected;
 laplacian(Dpart5,Cpart5) Gauss linear corrected;
 laplacian(Dsalt,Csalt) Gauss linear corrected;
 laplacian(nuEff,U) Gauss linear corrected;
 laplacian((1|A(U)),p) Gauss linear corrected;
}

interpolationSchemes
{
 default none;
 flux(HbyA) linear;
 flux(U) linear;
 interpolate(HbyA) linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p               ;
}


// ************************************************************************* //
